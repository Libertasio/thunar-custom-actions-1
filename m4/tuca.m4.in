dnl
changecom(`/*',`*/')dnl
changequote(`<~', `~>')dnl
dnl
dnl programs from ./configure
define(<~TUCA_ZENITY~>,<~@zenity_bin@~>)dnl
define(<~TUCA_CONVERT~>,<~@convert_bin@~>)dnl
define(<~TUCA_MAKE~>,<~@make_bin@~>)dnl
define(<~TUCA_XDG_OPEN~>,<~@xdg_open_bin@~>)dnl
define(<~TUCA_SU~>,<~@su_bin@~>)dnl
define(<~TUCA_XARGS~>,<~@xargs_bin@~>)dnl
define(<~TUCA_PERL~>,<~@perl_bin@~>)dnl
define(<~TUCA_GPG2~>,<~@gpg2_bin@~>)dnl
define(<~TUCA_ZENITY~>,<~@zenity_bin@~>)dnl
define(<~TUCA_BC~>,<~@bc_bin@~>)dnl
define(<~TUCA_GS~>,<~@gs_bin@~>)dnl
define(<~TUCA_M4~>,<~@m4_bin@~>)dnl
define(<~TUCA_PANDOC~>,<~@pandoc_bin@~>)dnl
define(<~TUCA_PYTHON3~>,<~@python3_bin@~>)dnl
define(<~TUCA_GETTEXT~>,<~@gettext_bin@~>)dnl
define(<~TUCA_GETTEXTSH~>,<~@gettextsh_bin@~>)dnl
define(<~TUCA_MD5SUM~>,<~@md5sum_bin@~>)dnl
define(<~TUCA_SHA1SUM~>,<~@sha1sum_bin@~>)dnl
define(<~TUCA_SHA256SUM~>,<~@sha256sum_bin@~>)dnl
define(<~TUCA_PINENTRY_GTK_2~>,<~@pinentry_gtk_2_bin@~>)dnl
define(<~TUCA_GPG2K_PARSER~>,<~@bindir@/parse-gpg2-k~>)
define(<~TUCA_GPG_AGENT~>,<~@gpg_agent_bin@~>)
define(<~TUCA_GPG_CONNECT_AGENT~>,<~@gpg_connect_agent_bin@~>)
dnl metadata from ./configure
define(<~TUCA_PACKAGE_NAME~>,<~@PACKAGE_NAME@~>)dnl
dnl paths from ./configure
define(<~TUCA_LOCALEDIR~>,<~@localedir@~>)dnl
define(<~TUCA_DATAROOTDIR~>,<~@datarootdir@~>)dnl
define(<~TUCA_BINDIR~>,<~@bindir@~>)dnl
dnl
define(<~TUCA_FILE_VAR~>,<~file~>)dnl
define(<~TUCA_TEMP_VAR~>,<~filetmp~>)dnl
define(<~TUCA_FILE_BASE_VAR~>,<~filebase~>)dnl
define(<~TUCA_OUT_VAR~>,<~fileout~>)dnl
define(<~TUCA_IN_VAR~>,<~fileinput~>)dnl
define(<~TUCA_FINAL_OUT_VAR~>,<~filefinalout~>)dnl
define(<~TUCA_FILE~>,<~"$TUCA_FILE_VAR()"~>)dnl
define(<~TUCA_FILE_BASE~>,<~"$TUCA_FILE_BASE_VAR()"~>)dnl
define(<~TUCA_TEMP~>,<~"$TUCA_TEMP_VAR()"~>)dnl
define(<~TUCA_OUT~>,<~"$TUCA_OUT_VAR()"~>)dnl
define(<~TUCA_IN~>,<~"$TUCA_IN_VAR()"~>)dnl
define(<~TUCA_FINAL_OUT~>,<~"$TUCA_FINAL_OUT_VAR()"~>)dnl
dnl
define(<~TUCA_ALL_FILES~>,<~%F~>)dnl
define(<~TUCA_ALL_FILE_FOLDERS~>,<~%D~>)dnl
define(<~TUCA_ALL_FILENAMES~>,<~%N~>)dnl
dnl
define(<~TUCA_FIRST_FILE~>,<~%f~>)dnl
define(<~TUCA_FIRST_FILE_FOLDER~>,<~%d~>)dnl
define(<~TUCA_FIRST_FILENAME~>,<~%n~>)dnl
dnl
dnl TUCA_SUBSHELL(COMMAND)
dnl - execute a command in a subshell
dnl
define(<~TUCA_SUBSHELL~>,<~dnl
(dnl
<~$1~>dnl
)dnl
~>)dnl
dnl
dnl TUCA_INIT()
dnl - initialise gettext
dnl
define(<~TUCA_INIT~>,<~dnl
set -e;dnl
export TEXTDOMAIN='TUCA_PACKAGE_NAME()';dnl
export TEXTDOMAINDIR='TUCA_LOCALEDIR()';dnl
. TUCA_GETTEXTSH()<~~>dnl
~>)dnl
dnl
dnl TUCA_TRANSLATE(text)
dnl - output translated text
dnl
define(<~TUCA_TRANSLATE~>,<~dnl
$(eval_gettext '<~$1~>')<~~>dnl
~>)dnl
dnl
dnl TUCA_PROGRESSBAR(command,[title],[pulsing])
dnl - show a progressbar with title to indicate current progress
dnl - if $2 = pulsing, then just pulse, don't show percentage
dnl
define(<~TUCA_PROGRESSBAR~>,<~dnl
TUCA_SUBSHELL($1)dnl
|dnl
TUCA_ZENITY() --progress --auto-kill --auto-close<~~>dnl
ifelse($2,,,<~ --title="$(echo $2)"~>)<~~>dnl
ifelse($3,pulse,<~ --pulsate~>)<~~>dnl
~>)dnl
dnl
dnl TUCA_PROGRESSBAR_TEXT(text)
dnl - set the text shown on the progressbar
dnl
define(<~TUCA_PROGRESSBAR_TEXT~>,<~dnl
echo '#'<~$1~>dnl
~>)dnl
dnl
dnl TUCA_PROGRESSBAR_PERCENTAGE(percentage)
dnl - set the progressbar percentage
dnl
define(<~TUCA_PROGRESSBAR_PERCENTAGE~>,<~dnl
echo <~$1~>dnl
~>)dnl
dnl
dnl TUCA_ERROR(text)
dnl - show the user the error "text"
dnl
define(<~TUCA_ERROR~>,<~dnl
TUCA_ZENITY() --error --text="$(echo $1)"<~~>dnl
~>)dnl
dnl
dnl TUCA_WARNING(text)
dnl - warn the user with "text"
dnl
define(<~TUCA_WARNING~>,<~dnl
TUCA_ZENITY() --warning --text="$(echo $1)"<~~>dnl
~>)dnl
dnl
dnl TUCA_PASSWORD([title])
dnl - ask the user for a password, optionally setting window "title"
dnl
define(<~TUCA_PASSWORD~>,<~dnl
TUCA_ZENITY() --password<~~>dnl
ifelse($2,,,<~ --title="$(echo $2)"~>)<~~>dnl
~>)dnl
dnl
dnl
dnl TUCA_CONFIRM(text)
dnl - ask the user to do "text"
dnl
define(<~TUCA_CONFIRM~>,<~dnl
TUCA_ZENITY() --question --text="$(echo $1)"<~~>dnl
~>)dnl
dnl
dnl TUCA_GET_LOCAL_TMPFILE_NAME(file)
dnl - search for a temporary filename that 
dnl     - has the full basename of "file" in its basename
dnl     - resides in the same directory as "file"
dnl     - does not exist already
dnl
define(<~TUCA_GET_LOCAL_TMPFILE_NAME~>,<~dnl
$(dnl
f=$(echo $1);dnl
while test -e "$f";do dnl
f=$(dirname "$f")/.$(basename "$f").tmp;dnl
done;dnl
echo "$f")dnl
~>)dnl
dnl
dnl TUCA_COLOR_SELECTION([html])
dnl $1 = html returns hex color in HTML-style
dnl
define(<~TUCA_COLOR_SELECTION~>,<~dnl
TUCA_ZENITY() --color-selection<~~>dnl
ifelse($1,html,<~| TUCA_PERL() -ne '@tmp=m/\D+(\d+)\D+(\d+)\D+(\d+)/ or @tmp=(255,255,255);printf "<~#~>%%02X%%02X%%02X",@tmp'~>)<~~>dnl
~>)dnl
dnl
dnl TUCA_CREATE_FILE(command,input,outfile,[notmpfile])
dnl - process "command" to create an "outfile" given "input"
dnl - in "command": 
dnl     - TUCA_OUT is output "outfile"
dnl     - TUCA_IN is "input"
dnl   file
dnl - caches the result in a temporary file if input and output are equal unless
dnl   "notmpfile" was specified
dnl
define(<~TUCA_CREATE_FILE~>,<~dnl
TUCA_IN_VAR()="$(echo $2)";dnl set input var
TUCA_FINAL_OUT_VAR()="$(echo $3)";dnl set final output var
ifelse($4,notmpfile,dnl
dnl no tmpfile desired, output directly to final output file
TUCA_OUT_VAR()=TUCA_FINAL_OUT();,dnl
dnl tmpfile is wanted, so cache result to tmpfile if needed
dnl input and output are equal, tempfile is needed
if test TUCA_IN() = TUCA_FINAL_OUT();then dnl
 TUCA_OUT_VAR()=TUCA_GET_LOCAL_TMPFILE_NAME(TUCA_FINAL_OUT());dnl  use tmpfile
else dnl input and output differ, no tempfile needed
 TUCA_OUT_VAR()=TUCA_FINAL_OUT();dnl
fi;dnl
)dnl
dnl check if output file already exists
dnl if output file already exists and input and output file are not the same,
dnl then ask the user to confirm to overwrite
dnl TODO: there is still this TUCA_FILE() here that should actually not be in 
dnl       this macro.
OVERWRITE=yes;dnl
if test -e TUCA_FINAL_OUT() -a ! TUCA_IN() = TUCA_FINAL_OUT();then dnl
 base=$(basename TUCA_FINAL_OUT());dnl
 if ! (TUCA_CONFIRM(TUCA_TRANSLATE(overwrite $base?)));then dnl
  OVERWRITE=no;dnl
 fi;dnl
fi;dnl
dnl only run the command if user confirmed to overwrite
if test "$OVERWRITE" = "yes";then dnl
 TUCA_SUBSHELL($1);dnl
fi;dnl
dnl if user TUCA_OUT  and final TUCA_FINAL_OUT differ, TUCA_OUT was obviously a 
dnl temporary file. So copy it over to finish.
ifelse($4,notmpfile,,dnl only if a tempfile is wanted at all
if ! test TUCA_OUT() = TUCA_FINAL_OUT();then dnl
 if cp TUCA_OUT() TUCA_FINAL_OUT();then dnl
  rm TUCA_OUT();dnl
 else dnl
  TUCA_ERROR(TUCA_TRANSLATE(something went wrong copying the dnl
file $TUCA_OUT_VAR() over to $TUCA_FINAL_OUT_VAR().));dnl
 fi;dnl
fi) dnl
~>)dnl
dnl
dnl TUCA_LOOP(command,[description])
dnl - loop over TUCA_ALL_FILES
dnl - execute "command" on each file 
dnl - use TUCA_PROGRESSBAR_TEXT to show "description" followed by the current 
dnl   file
dnl - use TUCA_PROGRESSBAR_PERCENTAGE to show current progress
dnl
define(<~TUCA_LOOP~>,<~dnl
AMOUNT=$(for TUCA_FILE_VAR() in TUCA_ALL_FILES();do echo TUCA_FILE();done | wc -l);dnl
NR=0;dnl
for TUCA_FILE_VAR() in TUCA_ALL_FILES();do dnl
dnl calculate current percentage
 NR="$(echo "$NR+1" | TUCA_BC())";dnl
 PERCENTAGE="$(echo "$NR*100/$AMOUNT" | TUCA_BC())";dnl
dnl get 
 TUCA_FILE_BASE_VAR()=$(basename TUCA_FILE());dnl current file's basename
dnl update progressbar text
 TUCA_PROGRESSBAR_TEXT($2 ... <~~>TUCA_FILE_BASE());dnl
 dnl run command 
 TUCA_SUBSHELL($1);dnl
 dnl update progressbar percentage
 TUCA_PROGRESSBAR_PERCENTAGE($PERCENTAGE);dnl
done<~~>dnl
~>)dnl
dnl
dnl TUCA_CMD([use_tmpfile])
dnl - do initialisation
dnl
define(<~TUCA_CMD~>,<~dnl
TUCA_SUBSHELL(dnl
TUCA_INIT();dnl
<~$1~>dnl
)dnl
~>)dnl
dnl
dnl TUCA_GPG_INIT()
dnl - make sure gpg is usable by initialising some things
dnl
define(<~TUCA_GPG_INIT~>,<~dnl
if ! TUCA_GPG_AGENT();then dnl check if agent is not running
    TUCA_PROGRESSBAR(dnl
        TUCA_PROGRESSBAR_TEXT(TUCA_TRANSLATE(Initialising gnupg...));dnl show text
        TUCA_GPG2() --list-public-keys;dnl make sure a ~/.gnupg directory exists
        TUCA_GPG_CONNECT_AGENT() /bye;dnl start the gpg-agent
        TUCA_GPG_AGENT() --pinentry-program="TUCA_PINENTRY_GTK_2()" dnl tell gpg-agent to use pinentry-gtk-2
        pulse,dnl let the progressbar only pulse
        );dnl
fi<~~>dnl
~>)dnl
